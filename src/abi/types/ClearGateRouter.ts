/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ClearGateRouterInterface extends utils.Interface {
  functions: {
    "SWAP_ROUTER_REGISTRY_SLOT()": FunctionFragment;
    "depositAndSwap(address,uint8,bytes,uint256,address)": FunctionFragment;
    "depositAndSwapWithPermit(address,uint8,bytes,uint256,address,uint256,bytes)": FunctionFragment;
    "depositWithPermit(address,uint256,uint256,bytes)": FunctionFragment;
    "registry()": FunctionFragment;
    "withdrawAndSwap(address,uint8[],bytes[],uint256,address)": FunctionFragment;
    "withdrawAndSwapWithPermit(address,uint8[],bytes[],uint256,uint256,bytes,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SWAP_ROUTER_REGISTRY_SLOT"
      | "depositAndSwap"
      | "depositAndSwapWithPermit"
      | "depositWithPermit"
      | "registry"
      | "withdrawAndSwap"
      | "withdrawAndSwapWithPermit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SWAP_ROUTER_REGISTRY_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndSwapWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAndSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndSwapWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "SWAP_ROUTER_REGISTRY_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndSwapWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndSwapWithPermit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ClearGateRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearGateRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SWAP_ROUTER_REGISTRY_SLOT(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositAndSwap(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      cellar: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    withdrawAndSwap(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  SWAP_ROUTER_REGISTRY_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

  depositAndSwap(
    cellar: PromiseOrValue<string>,
    exchange: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    assets: PromiseOrValue<BigNumberish>,
    assetIn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndSwapWithPermit(
    cellar: PromiseOrValue<string>,
    exchange: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    assets: PromiseOrValue<BigNumberish>,
    assetIn: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    cellar: PromiseOrValue<string>,
    assets: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  withdrawAndSwap(
    cellar: PromiseOrValue<string>,
    exchanges: PromiseOrValue<BigNumberish>[],
    swapDatas: PromiseOrValue<BytesLike>[],
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndSwapWithPermit(
    cellar: PromiseOrValue<string>,
    exchanges: PromiseOrValue<BigNumberish>[],
    swapDatas: PromiseOrValue<BytesLike>[],
    assets: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SWAP_ROUTER_REGISTRY_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndSwap(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWithPermit(
      cellar: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    withdrawAndSwap(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    SWAP_ROUTER_REGISTRY_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndSwap(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      cellar: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndSwap(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SWAP_ROUTER_REGISTRY_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAndSwap(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchange: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      assets: PromiseOrValue<BigNumberish>,
      assetIn: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      cellar: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAndSwap(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndSwapWithPermit(
      cellar: PromiseOrValue<string>,
      exchanges: PromiseOrValue<BigNumberish>[],
      swapDatas: PromiseOrValue<BytesLike>[],
      assets: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

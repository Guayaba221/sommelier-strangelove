/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ICellarStaking {
  export type UserStakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    amountWithBoost: PromiseOrValue<BigNumberish>;
    unbondTimestamp: PromiseOrValue<BigNumberish>;
    rewardPerTokenPaid: PromiseOrValue<BigNumberish>;
    rewards: PromiseOrValue<BigNumberish>;
    lock: PromiseOrValue<BigNumberish>;
  };

  export type UserStakeStructOutput = [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number
  ] & {
    amount: BigNumber;
    amountWithBoost: BigNumber;
    unbondTimestamp: number;
    rewardPerTokenPaid: BigNumber;
    rewards: BigNumber;
    lock: number;
  };
}

export interface CellarStakingV0815Interface extends utils.Interface {
  functions: {
    "LONG_BOOST()": FunctionFragment;
    "LONG_BOOST_TIME()": FunctionFragment;
    "MEDIUM_BOOST()": FunctionFragment;
    "MEDIUM_BOOST_TIME()": FunctionFragment;
    "ONE()": FunctionFragment;
    "ONE_DAY()": FunctionFragment;
    "ONE_WEEK()": FunctionFragment;
    "SHORT_BOOST()": FunctionFragment;
    "SHORT_BOOST_TIME()": FunctionFragment;
    "TWO_WEEKS()": FunctionFragment;
    "cancelUnbonding(uint256)": FunctionFragment;
    "cancelUnbondingAll()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimAll()": FunctionFragment;
    "claimable()": FunctionFragment;
    "currentEpochDuration()": FunctionFragment;
    "distributionToken()": FunctionFragment;
    "emergencyClaim()": FunctionFragment;
    "emergencyStop(bool)": FunctionFragment;
    "emergencyUnstake()": FunctionFragment;
    "endTimestamp()": FunctionFragment;
    "ended()": FunctionFragment;
    "getUserStakes(address)": FunctionFragment;
    "latestRewardsTimestamp()": FunctionFragment;
    "minimumDeposit()": FunctionFragment;
    "nextEpochDuration()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewardsReady()": FunctionFragment;
    "setMinimumDeposit(uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setRewardsDuration(uint256)": FunctionFragment;
    "stake(uint256,uint8)": FunctionFragment;
    "stakes(address,uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "totalDeposits()": FunctionFragment;
    "totalDepositsWithBoost()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unbond(uint256)": FunctionFragment;
    "unbondAll()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakeAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LONG_BOOST"
      | "LONG_BOOST_TIME"
      | "MEDIUM_BOOST"
      | "MEDIUM_BOOST_TIME"
      | "ONE"
      | "ONE_DAY"
      | "ONE_WEEK"
      | "SHORT_BOOST"
      | "SHORT_BOOST_TIME"
      | "TWO_WEEKS"
      | "cancelUnbonding"
      | "cancelUnbondingAll"
      | "claim"
      | "claimAll"
      | "claimable"
      | "currentEpochDuration"
      | "distributionToken"
      | "emergencyClaim"
      | "emergencyStop"
      | "emergencyUnstake"
      | "endTimestamp"
      | "ended"
      | "getUserStakes"
      | "latestRewardsTimestamp"
      | "minimumDeposit"
      | "nextEpochDuration"
      | "notifyRewardAmount"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "rewardPerToken"
      | "rewardPerTokenStored"
      | "rewardRate"
      | "rewardsReady"
      | "setMinimumDeposit"
      | "setPaused"
      | "setRewardsDuration"
      | "stake"
      | "stakes"
      | "stakingToken"
      | "totalDeposits"
      | "totalDepositsWithBoost"
      | "transferOwnership"
      | "unbond"
      | "unbondAll"
      | "unstake"
      | "unstakeAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LONG_BOOST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LONG_BOOST_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_BOOST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_BOOST_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_DAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SHORT_BOOST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHORT_BOOST_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TWO_WEEKS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelUnbonding",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUnbondingAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claimAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStop",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnstake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRewardsTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositsWithBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unbondAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LONG_BOOST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LONG_BOOST_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_BOOST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_BOOST_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_DAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SHORT_BOOST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHORT_BOOST_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TWO_WEEKS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnbonding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnbondingAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRewardsTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositsWithBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbondAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeAll", data: BytesLike): Result;

  events: {
    "CancelUnbond(address,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "EmergencyClaim(address,uint256)": EventFragment;
    "EmergencyStop(address,bool)": EventFragment;
    "EmergencyUnstake(address,uint256,uint256)": EventFragment;
    "EpochDurationChange(uint256)": EventFragment;
    "Funding(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
    "Unbond(address,uint256,uint256)": EventFragment;
    "Unstake(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelUnbond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyStop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochDurationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funding"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface CancelUnbondEventObject {
  user: string;
  depositId: BigNumber;
}
export type CancelUnbondEvent = TypedEvent<
  [string, BigNumber],
  CancelUnbondEventObject
>;

export type CancelUnbondEventFilter = TypedEventFilter<CancelUnbondEvent>;

export interface ClaimEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface EmergencyClaimEventObject {
  user: string;
  amount: BigNumber;
}
export type EmergencyClaimEvent = TypedEvent<
  [string, BigNumber],
  EmergencyClaimEventObject
>;

export type EmergencyClaimEventFilter = TypedEventFilter<EmergencyClaimEvent>;

export interface EmergencyStopEventObject {
  owner: string;
  claimable: boolean;
}
export type EmergencyStopEvent = TypedEvent<
  [string, boolean],
  EmergencyStopEventObject
>;

export type EmergencyStopEventFilter = TypedEventFilter<EmergencyStopEvent>;

export interface EmergencyUnstakeEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type EmergencyUnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyUnstakeEventObject
>;

export type EmergencyUnstakeEventFilter =
  TypedEventFilter<EmergencyUnstakeEvent>;

export interface EpochDurationChangeEventObject {
  duration: BigNumber;
}
export type EpochDurationChangeEvent = TypedEvent<
  [BigNumber],
  EpochDurationChangeEventObject
>;

export type EpochDurationChangeEventFilter =
  TypedEventFilter<EpochDurationChangeEvent>;

export interface FundingEventObject {
  rewardAmount: BigNumber;
  rewardEnd: BigNumber;
}
export type FundingEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundingEventObject
>;

export type FundingEventFilter = TypedEventFilter<FundingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakeEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnbondEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type UnbondEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UnbondEventObject
>;

export type UnbondEventFilter = TypedEventFilter<UnbondEvent>;

export interface UnstakeEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
  reward: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface CellarStakingV0815 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CellarStakingV0815Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LONG_BOOST(overrides?: CallOverrides): Promise<[BigNumber]>;

    LONG_BOOST_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEDIUM_BOOST(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEDIUM_BOOST_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    SHORT_BOOST(overrides?: CallOverrides): Promise<[BigNumber]>;

    SHORT_BOOST_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWO_WEEKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelUnbonding(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelUnbondingAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimable(overrides?: CallOverrides): Promise<[boolean]>;

    currentEpochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributionToken(overrides?: CallOverrides): Promise<[string]>;

    emergencyClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyStop(
      makeRewardsClaimable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyUnstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    ended(overrides?: CallOverrides): Promise<[boolean]>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ICellarStaking.UserStakeStructOutput[]]>;

    latestRewardsTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextEpochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyRewardAmount(
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newRewardPerTokenStored: BigNumber;
        latestTimestamp: BigNumber;
      }
    >;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsReady(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinimumDeposit(
      _minimum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsDuration(
      _epochDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      lock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        amountWithBoost: BigNumber;
        unbondTimestamp: number;
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
        lock: number;
      }
    >;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepositsWithBoost(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbond(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbondAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LONG_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

  LONG_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  MEDIUM_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

  MEDIUM_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  SHORT_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

  SHORT_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  TWO_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

  cancelUnbonding(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelUnbondingAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimable(overrides?: CallOverrides): Promise<boolean>;

  currentEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  distributionToken(overrides?: CallOverrides): Promise<string>;

  emergencyClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyStop(
    makeRewardsClaimable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyUnstake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  ended(overrides?: CallOverrides): Promise<boolean>;

  getUserStakes(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ICellarStaking.UserStakeStructOutput[]>;

  latestRewardsTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  minimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  nextEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      newRewardPerTokenStored: BigNumber;
      latestTimestamp: BigNumber;
    }
  >;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsReady(overrides?: CallOverrides): Promise<BigNumber>;

  setMinimumDeposit(
    _minimum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsDuration(
    _epochDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    lock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, BigNumber, number] & {
      amount: BigNumber;
      amountWithBoost: BigNumber;
      unbondTimestamp: number;
      rewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
      lock: number;
    }
  >;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepositsWithBoost(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbond(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbondAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LONG_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    cancelUnbonding(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUnbondingAll(overrides?: CallOverrides): Promise<void>;

    claim(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAll(overrides?: CallOverrides): Promise<BigNumber[]>;

    claimable(overrides?: CallOverrides): Promise<boolean>;

    currentEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    distributionToken(overrides?: CallOverrides): Promise<string>;

    emergencyClaim(overrides?: CallOverrides): Promise<void>;

    emergencyStop(
      makeRewardsClaimable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyUnstake(overrides?: CallOverrides): Promise<void>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<boolean>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ICellarStaking.UserStakeStructOutput[]>;

    latestRewardsTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newRewardPerTokenStored: BigNumber;
        latestTimestamp: BigNumber;
      }
    >;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsReady(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumDeposit(
      _minimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsDuration(
      _epochDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      lock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        amountWithBoost: BigNumber;
        unbondTimestamp: number;
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
        lock: number;
      }
    >;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositsWithBoost(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondAll(overrides?: CallOverrides): Promise<void>;

    unstake(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeAll(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {
    "CancelUnbond(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      depositId?: null
    ): CancelUnbondEventFilter;
    CancelUnbond(
      user?: PromiseOrValue<string> | null,
      depositId?: null
    ): CancelUnbondEventFilter;

    "Claim(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): ClaimEventFilter;

    "EmergencyClaim(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyClaimEventFilter;
    EmergencyClaim(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyClaimEventFilter;

    "EmergencyStop(address,bool)"(
      owner?: null,
      claimable?: null
    ): EmergencyStopEventFilter;
    EmergencyStop(owner?: null, claimable?: null): EmergencyStopEventFilter;

    "EmergencyUnstake(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): EmergencyUnstakeEventFilter;
    EmergencyUnstake(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): EmergencyUnstakeEventFilter;

    "EpochDurationChange(uint256)"(
      duration?: null
    ): EpochDurationChangeEventFilter;
    EpochDurationChange(duration?: null): EpochDurationChangeEventFilter;

    "Funding(uint256,uint256)"(
      rewardAmount?: null,
      rewardEnd?: null
    ): FundingEventFilter;
    Funding(rewardAmount?: null, rewardEnd?: null): FundingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Stake(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): StakeEventFilter;

    "Unbond(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): UnbondEventFilter;
    Unbond(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null
    ): UnbondEventFilter;

    "Unstake(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null,
      reward?: null
    ): UnstakeEventFilter;
    Unstake(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null,
      reward?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    LONG_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_BOOST(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_BOOST_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    cancelUnbonding(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelUnbondingAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    distributionToken(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyStop(
      makeRewardsClaimable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyUnstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestRewardsTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsReady(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumDeposit(
      _minimum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsDuration(
      _epochDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      lock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositsWithBoost(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbond(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbondAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LONG_BOOST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LONG_BOOST_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_BOOST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_BOOST_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHORT_BOOST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHORT_BOOST_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWO_WEEKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelUnbonding(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelUnbondingAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyStop(
      makeRewardsClaimable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyUnstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRewardsTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextEpochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsReady(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinimumDeposit(
      _minimum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDuration(
      _epochDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      lock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositsWithBoost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbondAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
